{"version":3,"sources":["Components/PokeTable.jsx","index.js"],"names":["PokeTable","state","currentView","idResult","nameResult","specResult","typeResult","abilityResult","moveResult","picResult","prevPic","prevID","prevName","searchType","searchParam","urlForPokeSearch","urlForMoveSearch","colorStyle","color","borderStyle","borderColor","moveNameResult","idMv","moveEffectResult","movePowerResult","moveAccuracyResult","moveEffectChanceResult","moveTypeResult","abilityIdResult","abilityNameResult","abilityEffectResult","typeIdResult","typeNameResult","doubleDamageFrom","doubleDamageTo","halfDamageFrom","halfDamageTo","noDamageFrom","noDamageTo","speciesChain","evolutionChain","hpResult","attackResult","defResult","speedResult","spattackResult","spdefResult","this","setState","typeColor","length","type","name","stringD","charAt","toUpperCase","slice","_this2","fetch","then","d","json","id","moves","sprites","front_default","abilities","types","stats","base_stat","_this3","s","evolution_chain","url","c","chain","moveParam","_this4","m","effect_entries","short_effect","power","accuracy","effect_chance","toLowerCase","abilParam","_this5","b","typeParam","_this6","t","damage_relations","double_damage_from","double_damage_to","half_damage_from","half_damage_to","no_damage_from","no_damage_to","_this7","react_default","a","createElement","Fragment","style","src","defaultValue","onClick","e","target","value","onChange","pokeSearch","className","Object","keys","map","abil","ab","abilitySearch","ability","firstUpper","typing","typeSearch","move","mv","moveSearch","version_group_details","level_learned_at","move_learn_method","colSpan","r","resetView","rowSpan","typ","Component","ReactDOM","render","Components_PokeTable","document","getElementById"],"mappings":"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","file":"static/js/main.079f7ad5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass PokeTable extends Component {\n    state = { \n        currentView: \"PokeInfo\",\n        //Results obtained from JSON Fethc\n        idResult: null,\n        nameResult: null,\n        specResult: null,\n        typeResult: [],\n        abilityResult: [],\n        moveResult: [],\n        picResult: null ,\n        prevPic: null,\n        prevID: null,\n        prevName: null,\n        //Parameters for the Search\n        searchType: \"pokemon\",\n        searchParam: \"0\",\n        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/1/\",\n        urlForMoveSearch: \"https://pokeapi.co/api/v2/move/1/\",\n        //CSS Stylings\n        colorStyle: {\n            color: 'red'\n        },\n        borderStyle: {\n            borderColor: 'white'\n        },\n        //Move States\n        moveNameResult: null,\n        idMv: null,\n        moveEffectResult: null,\n        movePowerResult: 0,\n        moveAccuracyResult: 0,\n        moveEffectChanceResult: 0,\n        moveTypeResult: null,\n        //Ability States\n        abilityIdResult: 0,\n        abilityNameResult: null,\n        abilityEffectResult: null,\n        //Type States\n        typeIdResult: 0,\n        typeNameResult: null,\n        doubleDamageFrom: [],\n        doubleDamageTo: [],\n        halfDamageFrom: [],\n        halfDamageTo: [],\n        noDamageFrom: [],\n        noDamageTo: [],\n        //Evolution States\n        speciesChain: null,\n        evolutionChain: [],\n        //Stats States\n        hpResult: 0,\n        attackResult: 0,\n        defResult: 0,\n        speedResult: 0,\n        spattackResult: 0,\n        spdefResult: 0\n    }\n\n/*\n//\n//      Functions\n//\n*/\n\n    //Go Back to PokeInfo\n    resetView() {\n        this.setState({\n            currentView: \"PokeInfo\",\n            picResult: this.state.prevPic,\n            idResult: this.state.prevID,\n            nameResult: this.state.prevName\n        })\n        var typeColor = null;\n        //Check for Primary Type\n        if(this.state.typeResult.length === 1) {\n            typeColor = this.state.typeResult[0].type.name;\n        } else {\n            if (this.state.typeResult[1].type.name === 'fire') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'grass') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'electric') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'water') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'ice') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else {\n                typeColor = this.state.typeResult[0].type.name;\n            }\n        }\n        //Color Sets\n        if (typeColor === 'fire' || typeColor === 'dragon') {\n            this.setState({\n                borderStyle: {borderColor: 'red'},\n                colorStyle: {color: 'red'}\n            })\n        } else if(typeColor === 'water' || typeColor === 'ice') {\n            this.setState({\n                borderStyle: {borderColor: 'blue'},\n                colorStyle: {color: 'blue'}\n            })\n        } else if(typeColor === 'electric') {\n            this.setState({\n                borderStyle: {borderColor: 'yellow'},\n                colorStyle: {color: 'yellow'}\n            })\n        } else if(typeColor === 'grass') {\n            this.setState({\n                borderStyle: {borderColor: 'green'},\n                colorStyle: {color: 'green'}\n            })\n        } else if(typeColor === 'poison') {\n            this.setState({\n                borderStyle: {borderColor: 'purple'},\n                colorStyle: {color: 'purple'}\n            })\n        } else if(typeColor === 'ground' || typeColor === 'rock' || typeColor === 'fighting') {\n            this.setState({\n                borderStyle: {borderColor: 'brown'},\n                colorStyle: {color: 'brown'}\n            })\n        } else if(typeColor === 'bug') {\n            this.setState({\n                borderStyle: {borderColor: 'lightgreen'},\n                colorStyle: {color: 'lightgreen'}\n            })\n        } else if(typeColor === 'psychic' || typeColor === 'ghost') {\n            this.setState({\n                borderStyle: {borderColor: 'purple'},\n                colorStyle: {color: 'purple'}\n            })\n        } else if(typeColor === 'dark') {\n            this.setState({\n                borderStyle: {borderColor: 'darkred'},\n                colorStyle: {color: 'darkred'}\n            })\n        }else {\n            this.setState({\n                borderStyle: {borderColor: 'white'},\n                colorStyle: {color: 'gray'}\n            })\n        }\n    }\n\n    //Function to UpperCase first Letter\n    firstUpper(stringD) {\n        return(\n            stringD.charAt(0).toUpperCase() + stringD.slice(1)\n        );\n    }\n\n    //Fetch Function\n    pokeSearch() {\n        fetch(this.state.urlForPokeSearch)\n            //Return as JSON\n            .then(d => d.json())\n            .then(d => {\n                this.setState({\n                    idResult: \"#\" + d.id,\n                    prevID: \"#\" + d.id,\n                    nameResult: d.name.charAt(0).toUpperCase() + d.name.slice(1),\n                    prevName: d.name.charAt(0).toUpperCase() + d.name.slice(1),\n                    specResult: \"https://pokeapi.co/api/v2/pokemon-species/\" + d.name + \"/\",\n                    moveResult: d.moves,\n                    picResult: d.sprites.front_default,\n                    prevPic: d.sprites.front_default,\n                    abilityResult: d.abilities,\n                    typeResult: d.types,\n                    speedResult: d.stats[0].base_stat,\n                    spdefResult: d.stats[1].base_stat,\n                    spattackResult: d.stats[2].base_stat,\n                    defResult: d.stats[3].base_stat,\n                    attackResult: d.stats[4].base_stat,\n                    hpResult: d.stats[5].base_stat\n                })\n            })\n            //Set Style Colors depending on Result Type\n            .then(d => {\n                var typeColor = null;\n                //Check for Primary Type\n                if(this.state.typeResult.length === 1) {\n                    typeColor = this.state.typeResult[0].type.name;\n                } else {\n                    if (this.state.typeResult[1].type.name === 'fire') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'grass') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'electric') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'water') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'ice') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else {\n                        typeColor = this.state.typeResult[0].type.name;\n                    }\n                }\n                //Color Sets\n                if (typeColor === 'fire' || typeColor === 'dragon') {\n                    this.setState({\n                        borderStyle: {borderColor: 'red'},\n                        colorStyle: {color: 'red'}\n                    })\n                } else if(typeColor === 'water' || typeColor === 'ice') {\n                    this.setState({\n                        borderStyle: {borderColor: 'blue'},\n                        colorStyle: {color: 'blue'}\n                    })\n                } else if(typeColor === 'electric') {\n                    this.setState({\n                        borderStyle: {borderColor: 'yellow'},\n                        colorStyle: {color: 'yellow'}\n                    })\n                } else if(typeColor === 'grass') {\n                    this.setState({\n                        borderStyle: {borderColor: 'green'},\n                        colorStyle: {color: 'green'}\n                    })\n                } else if(typeColor === 'poison') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'ground' || typeColor === 'rock' || typeColor === 'fighting') {\n                    this.setState({\n                        borderStyle: {borderColor: 'brown'},\n                        colorStyle: {color: 'brown'}\n                    })\n                } else if(typeColor === 'bug') {\n                    this.setState({\n                        borderStyle: {borderColor: 'lightgreen'},\n                        colorStyle: {color: 'lightgreen'}\n                    })\n                } else if(typeColor === 'psychic' || typeColor === 'ghost') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'dark') {\n                    this.setState({\n                        borderStyle: {borderColor: 'darkred'},\n                        colorStyle: {color: 'darkred'}\n                    })\n                }else {\n                    this.setState({\n                        borderStyle: {borderColor: 'white'},\n                        colorStyle: {color: 'gray'}\n                    })\n                }\n            })\n            /*\n            .then(d => {\n                this.speciesSearch()\n            })*/\n    }\n\n    speciesSearch() {\n        fetch(this.state.specResult)\n            .then(s => s.json())\n            .then(s => {\n                this.setState({\n                    speciesChain: s.evolution_chain.url\n                })\n            })\n            .then(s => {\n                fetch(this.state.speciesChain)\n                .then(c => c.json())\n                .then(c => {\n                    this.setState({\n                        evolutionChain: c.chain\n                    })\n                })\n            })\n    }\n\n\n    //Query API based on Move\n    moveSearch(moveParam) {\n        fetch(moveParam)\n            //Return as JSON\n            .then(m => m.json())\n            .then(m => {\n                this.setState({\n                    idMv: \"#\" + m.id,\n                    moveNameResult: m.name.charAt(0).toUpperCase() + m.name.slice(1),\n                    moveEffectResult: m.effect_entries[m.effect_entries.length -1].short_effect,\n                    movePowerResult: m.power,\n                    moveAccuracyResult: m.accuracy,\n                    moveEffectChanceResult: m.effect_chance,\n                    moveTypeResult: m.type.name.charAt(0).toUpperCase() + m.type.name.slice(1),\n                    currentView: \"MoveInfo\"\n                });\n            })\n            .then(m => {\n                var typeColor = null;\n                //Check for Primary Type\n                typeColor = this.state.moveTypeResult.toLowerCase();\n                //Color Sets\n                if (typeColor === 'fire' || typeColor === 'dragon') {\n                    this.setState({\n                        borderStyle: {borderColor: 'red'},\n                        colorStyle: {color: 'red'}\n                    })\n                } else if(typeColor === 'water' || typeColor === 'ice') {\n                    this.setState({\n                        borderStyle: {borderColor: 'blue'},\n                        colorStyle: {color: 'blue'}\n                    })\n                } else if(typeColor === 'electric') {\n                    this.setState({\n                        borderStyle: {borderColor: 'yellow'},\n                        colorStyle: {color: 'yellow'}\n                    })\n                } else if(typeColor === 'grass') {\n                    this.setState({\n                        borderStyle: {borderColor: 'green'},\n                        colorStyle: {color: 'green'}\n                    })\n                } else if(typeColor === 'poison') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'ground' || typeColor === 'rock' || typeColor === 'fighting') {\n                    this.setState({\n                        borderStyle: {borderColor: 'brown'},\n                        colorStyle: {color: 'brown'}\n                    })\n                } else if(typeColor === 'bug') {\n                    this.setState({\n                        borderStyle: {borderColor: 'lightgreen'},\n                        colorStyle: {color: 'lightgreen'}\n                    })\n                } else if(typeColor === 'psychic' || typeColor === 'ghost') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'dark') {\n                    this.setState({\n                        borderStyle: {borderColor: 'darkred'},\n                        colorStyle: {color: 'darkred'}\n                    })\n                }else {\n                    this.setState({\n                        borderStyle: {borderColor: 'white'},\n                        colorStyle: {color: 'gray'}\n                    })\n                }\n            })\n    }\n\n    //Query API based on Ability\n    abilitySearch(abilParam){\n        fetch(abilParam)\n            //Return as JSON\n            .then(b => b.json())\n            .then(b => {\n                this.setState({\n                    abilityIdResult: \"#\" + b.id,\n                    abilityNameResult: b.name.charAt(0).toUpperCase() + b.name.slice(1),\n                    abilityEffectResult: b.effect_entries[b.effect_entries.length -1].short_effect,\n                    currentView: \"AbilityInfo\"\n                });\n            })        \n    }\n\n    //Query API based on Type\n    typeSearch(typeParam) {\n        fetch(typeParam)\n        //Return JSON\n        .then( t => t.json())\n        .then( t => {\n            if (this.state.picResult != null) {\n                this.setState({\n                    typeIdResult: \"#\" + t.id,\n                    typeNameResult: t.name.charAt(0).toUpperCase() + t.name.slice(1),\n                    doubleDamageFrom: t.damage_relations.double_damage_from,\n                    doubleDamageTo: t.damage_relations.double_damage_to,\n                    halfDamageFrom: t.damage_relations.half_damage_from,\n                    halfDamageTo: t.damage_relations.half_damage_to,\n                    noDamageFrom: t.damage_relations.no_damage_from,\n                    noDamageTo: t.damage_relations.no_damage_to,\n                    prevPic: this.state.picResult,\n                    picResult: null,\n                    prevID: this.state.idResult,\n                    prevName: this.state.nameResult,\n                    nameResult: null,\n                    idResult: null,\n                    currentView: \"TypeInfo\"\n                });\n            } else {\n                this.setState({\n                    typeIdResult: \"#\" + t.id,\n                    typeNameResult: t.name.charAt(0).toUpperCase() + t.name.slice(1),\n                    doubleDamageFrom: t.damage_relations.double_damage_from,\n                    doubleDamageTo: t.damage_relations.double_damage_to,\n                    halfDamageFrom: t.damage_relations.half_damage_from,\n                    halfDamageTo: t.damage_relations.half_damage_to,\n                    noDamageFrom: t.damage_relations.no_damage_from,\n                    noDamageTo: t.damage_relations.no_damage_to,\n                    currentView: \"TypeInfo\"\n                });\n            }\n        })\n        .then(t => {\n            var typeColor = null;\n            //Check for Primary Type\n            typeColor = this.state.typeNameResult.toLowerCase();\n            //Color Sets\n            if (typeColor === 'fire' || typeColor === 'dragon') {\n                this.setState({\n                    borderStyle: {borderColor: 'red'},\n                    colorStyle: {color: 'red'}\n                })\n            } else if(typeColor === 'water' || typeColor === 'ice') {\n                this.setState({\n                    borderStyle: {borderColor: 'blue'},\n                    colorStyle: {color: 'blue'}\n                })\n            } else if(typeColor === 'electric') {\n                this.setState({\n                    borderStyle: {borderColor: 'yellow'},\n                    colorStyle: {color: 'yellow'}\n                })\n            } else if(typeColor === 'grass') {\n                this.setState({\n                    borderStyle: {borderColor: 'green'},\n                    colorStyle: {color: 'green'}\n                })\n            } else if(typeColor === 'poison') {\n                this.setState({\n                    borderStyle: {borderColor: 'purple'},\n                    colorStyle: {color: 'purple'}\n                })\n            } else if(typeColor === 'ground' || typeColor === 'rock' || typeColor === 'fighting') {\n                this.setState({\n                    borderStyle: {borderColor: 'brown'},\n                    colorStyle: {color: 'brown'}\n                })\n            } else if(typeColor === 'bug') {\n                this.setState({\n                    borderStyle: {borderColor: 'lightgreen'},\n                    colorStyle: {color: 'lightgreen'}\n                })\n            } else if(typeColor === 'psychic' || typeColor === 'ghost') {\n                this.setState({\n                    borderStyle: {borderColor: 'purple'},\n                    colorStyle: {color: 'purple'}\n                })\n            } else if(typeColor === 'dark') {\n                this.setState({\n                    borderStyle: {borderColor: 'darkred'},\n                    colorStyle: {color: 'darkred'}\n                })\n            }else {\n                this.setState({\n                    borderStyle: {borderColor: 'white'},\n                    colorStyle: {color: 'gray'}\n                })\n            }\n        })\n    }\n \n/*\n//\n//      Main\n//\n*/\n\n    render() { \n        return (\n            <React.Fragment>\n                {/*Headers*/}\n                <h1 style={this.state.colorStyle}>Pokedex</h1>\n                <h2>{this.state.idResult} {this.state.nameResult}</h2>\n                <img src={this.state.picResult}></img>\n                <br></br>\n\n        {(this.state.currentView === \"PokeInfo\") &&\n        <div id=\"PokeINFO\">\n        {/* Set API Url From Input */}\n                <input style={this.state.borderStyle} defaultValue=\"Pokemon or ID...\" onClick={ e =>\n                    e.target.value = ''\n                } onChange={ e => {\n                    this.setState({\n                        searchParam: (e.target.value).toLowerCase(),\n                        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/\" + (e.target.value).toLowerCase() + \"/\"\n                    })}\n                }></input>\n                {/* SearchButton */}\n                <button style={this.state.borderStyle} onClick={ () =>\n                    this.pokeSearch()\n                }>Search</button>\n                <br></br>\n                <br></br>\n                <div className=\"tableDiv\">\n\n                <table>\n                    <tr>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"abilityTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Abilities:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.abilityResult).map((abil) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>\n                                        <a style={this.state.colorStyle} onClick={ ab => {\n                                            this.abilitySearch(\"https://pokeapi.co/api/v2/ability/\"+this.state.abilityResult[abil].ability.name+\"/\");\n                                        }}>{this.firstUpper(this.state.abilityResult[abil].ability.name)}</a>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"typeTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Types:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.typeResult).map((typing) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>\n                                        <a style={this.state.colorStyle} onClick={ t => {\n                                            this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.typeResult[typing].type.name + \"/\");\n                                        }}>{this.firstUpper(this.state.typeResult[typing].type.name)}</a>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    </tr>\n                </table>\n\n                </div>\n\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle}>HP</th>\n                        <td style={this.state.borderStyle}>{this.state.hpResult}</td>\n                    </tr>\n                    <tr>\n                        <th style={this.state.borderStyle}>Attack</th>\n                        <td style={this.state.borderStyle}>{this.state.attackResult}</td>\n                    </tr>\n                    <tr>\n                        <th style={this.state.borderStyle}>Defense</th>\n                        <td style={this.state.borderStyle}>{this.state.defResult}</td>\n                    </tr>\n                    <tr>\n                        <th style={this.state.borderStyle}>Sp. Attack</th>\n                        <td style={this.state.borderStyle}>{this.state.spattackResult}</td>\n                    </tr>\n                    <tr>\n                        <th style={this.state.borderStyle}>Sp. Defense</th>\n                        <td style={this.state.borderStyle}>{this.state.spdefResult}</td>\n                    </tr>\n                    <tr>\n                        <th style={this.state.borderStyle}>Speed</th>\n                        <td style={this.state.borderStyle}>{this.state.speedResult}</td>\n                    </tr>\n                </table>\n                <h2>Moves:</h2>\n\n                <table id=\"moveTable\">\n                    <tr>\n                        <td style={this.state.borderStyle}> Move Name </td>\n                        <td style={this.state.borderStyle}> Learned At </td>\n                        <td style={this.state.borderStyle}> Learned By </td>\n                    </tr>\n                    {Object.keys(this.state.moveResult).map((move) => {\n                        return(\n                            <tr>\n                                <td style={this.state.borderStyle}>\n                                <a style={this.state.colorStyle} onClick={ mv => {\n                                    this.moveSearch(\"https://pokeapi.co/api/v2/move/\"+this.state.moveResult[move].move.name+\"/\");\n                                }}>{this.firstUpper(this.state.moveResult[move].move.name)}</a>\n                                </td>\n                                <td style={this.state.borderStyle}>{this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].level_learned_at}</td>\n                                <td style={this.state.borderStyle}>{this.firstUpper(this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].move_learn_method.name)}</td>\n                            </tr>\n                        );\n                    })}\n                </table>\n        </div>\n        }\n\n        {(this.state.currentView === \"MoveInfo\") &&\n            <div id=\"MoveInfo\">\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.moveNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.idMv}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Type</td>\n                        <td style={this.state.borderStyle}>{this.state.moveTypeResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect</td>\n                        <td style={this.state.borderStyle}>{this.state.moveEffectResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Power</td>\n                        <td style={this.state.borderStyle}>{this.state.movePowerResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Accuracy</td>\n                        <td style={this.state.borderStyle}>{this.state.moveAccuracyResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect Chance</td>\n                        <td style={this.state.borderStyle}>{this.state.moveEffectChanceResult}</td>\n                    </tr>\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n\n        {(this.state.currentView === \"AbilityInfo\") && \n            <div id=\"AbilityInfo\">\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.abilityNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.abilityIdResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect</td>\n                        <td style={this.state.borderStyle}>{this.state.abilityEffectResult}</td>\n                    </tr>\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n\n        {(this.state.currentView === \"TypeInfo\") && \n            <div id=\"TypeInfo\">\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.typeNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.typeIdResult}</td>\n                    </tr>\n                    <tr>\n                        <th rowSpan={this.state.doubleDamageFrom.length + 1} style={this.state.borderStyle}>Double Damage From</th>\n                    </tr>\n                        {Object.keys(this.state.doubleDamageFrom).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.doubleDamageFrom[typ].name + \"/\");\n                                }}>{this.firstUpper(this.state.doubleDamageFrom[typ].name)}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.doubleDamageTo.length + 1} style={this.state.borderStyle}>Double Damage To</th>\n                    </tr>\n                        {Object.keys(this.state.doubleDamageTo).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.doubleDamageTo[typ].name + \"/\");\n                                }}>{this.firstUpper(this.state.doubleDamageTo[typ].name)}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.halfDamageFrom.length + 1} style={this.state.borderStyle}>Half Damage From</th>\n                    </tr>\n                        {Object.keys(this.state.halfDamageFrom).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.halfDamageFrom[typ].name + \"/\");\n                                }}>{this.firstUpper(this.state.halfDamageFrom[typ].name)}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.halfDamageTo.length + 1} style={this.state.borderStyle}>Half Damage To</th>\n                    </tr>\n                        {Object.keys(this.state.halfDamageTo).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.halfDamageTo[typ].name + \"/\");\n                                }}>{this.firstUpper(this.state.halfDamageTo[typ].name)}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.noDamageFrom.length + 1} style={this.state.borderStyle}>No Damage From</th>\n                    </tr>\n                        {Object.keys(this.state.noDamageFrom).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.noDamageFrom[typ].name + \"/\");\n                                }}>{this.firstUpper(this.state.noDamageFrom[typ].name)}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.noDamageTo.length + 1} style={this.state.borderStyle}>No Damage To</th>\n                    </tr>\n                        {Object.keys(this.state.noDamageTo).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.noDamageTo[typ].name + \"/\");\n                                }}>{this.firstUpper(this.state.noDamageTo[typ].name)}</a>\n                                </td></tr>\n                            );\n                        })}\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n            </React.Fragment>\n        );\n    }\n}\n \nexport default PokeTable;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PokeTable from './Components/PokeTable';\n\nReactDOM.render(\n    <PokeTable />, \n    document.getElementById('root')\n);"],"sourceRoot":""}