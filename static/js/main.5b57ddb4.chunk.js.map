{"version":3,"sources":["Components/PokeTable.jsx","index.js"],"names":["PokeTable","state","currentView","idResult","nameResult","typeResult","abilityResult","moveResult","picResult","searchType","searchParam","urlForPokeSearch","urlForMoveSearch","colorStyle","color","borderStyle","borderColor","moveNameResult","idMv","moveEffectResult","movePowerResult","moveAccuracyResult","moveEffectChanceResult","this","setState","stringD","charAt","toUpperCase","slice","_this2","fetch","then","d","json","id","name","moves","sprites","front_default","abilities","types","typeColor","length","type","moveParam","_this3","m","effect_entries","short_effect","power","accuracy","effect_chance","_this4","react_default","a","createElement","Fragment","style","src","defaultValue","onClick","e","target","value","onChange","toLowerCase","pokeSearch","className","Object","keys","map","abil","firstUpper","ability","typing","move","mv","moveSearch","version_group_details","level_learned_at","move_learn_method","colSpan","r","resetView","Component","ReactDOM","render","Components_PokeTable","document","getElementById"],"mappings":"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","file":"static/js/main.5b57ddb4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass PokeTable extends Component {\n    state = { \n        currentView: 1,\n        //Results obtained from JSON Fethc\n        idResult: null,\n        nameResult: null,\n        typeResult: [],\n        abilityResult: [],\n        moveResult: [],\n        picResult: null ,\n        //Parameters for the Search\n        searchType: \"pokemon\",\n        searchParam: \"0\",\n        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/1/\",\n        urlForMoveSearch: \"https://pokeapi.co/api/v2/move/1/\",\n        //CSS Stylings\n        colorStyle: {\n            color: 'red'\n        },\n        borderStyle: {\n            borderColor: 'white'\n        },\n        //Move States\n        moveNameResult: null,\n        idMv: null,\n        moveEffectResult: null,\n        movePowerResult: 0,\n        moveAccuracyResult: 0,\n        moveEffectChanceResult: 0\n    }\n\n/*\n//\n//      Functions\n//\n*/\n\n    resetView() {\n        this.setState({\n            currentView: 1\n        })\n    }\n\n    //Function to UpperCase first Letter\n    firstUpper(stringD) {\n        return(\n            stringD.charAt(0).toUpperCase() + stringD.slice(1)\n        );\n    }\n\n    //Fetch Function\n    pokeSearch() {\n        fetch(this.state.urlForPokeSearch)\n            //Return as JSON\n            .then(d => d.json())\n            .then(d => {\n                this.setState({\n                    idResult: \"#\" + d.id,\n                    nameResult: d.name.charAt(0).toUpperCase() + d.name.slice(1),\n                    moveResult: d.moves,\n                    picResult: d.sprites.front_default,\n                    abilityResult: d.abilities,\n                    typeResult: d.types\n                })\n            })\n            //Set Style Colors depending on Result Type\n            .then(d => {\n                var typeColor = null;\n                //Check for Primary Type\n                if(this.state.typeResult.length === 1) {\n                    typeColor = this.state.typeResult[0].type.name;\n                } else {\n                    if (this.state.typeResult[1].type.name === 'fire') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'grass') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'electric') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'water') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'ice') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else {\n                        typeColor = this.state.typeResult[0].type.name;\n                    }\n                }\n                //Color Sets\n                if (typeColor === 'fire' || typeColor === 'dragon') {\n                    this.setState({\n                        borderStyle: {borderColor: 'red'},\n                        colorStyle: {color: 'red'}\n                    })\n                } else if(typeColor === 'water' || typeColor === 'ice') {\n                    this.setState({\n                        borderStyle: {borderColor: 'blue'},\n                        colorStyle: {color: 'blue'}\n                    })\n                } else if(typeColor === 'electric') {\n                    this.setState({\n                        borderStyle: {borderColor: 'yellow'},\n                        colorStyle: {color: 'yellow'}\n                    })\n                } else if(typeColor === 'grass') {\n                    this.setState({\n                        borderStyle: {borderColor: 'green'},\n                        colorStyle: {color: 'green'}\n                    })\n                } else if(typeColor === 'poison') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'ground' || typeColor === 'rock') {\n                    this.setState({\n                        borderStyle: {borderColor: 'brown'},\n                        colorStyle: {color: 'brown'}\n                    })\n                }else {\n                    this.setState({\n                        borderStyle: {borderColor: 'white'},\n                        colorStyle: {color: 'gray'}\n                    })\n                }\n            })\n    }\n\n    moveSearch(moveParam) {\n        fetch(moveParam)\n            //Return as JSON\n            .then(m => m.json())\n            .then(m => {\n                this.setState({\n                    idMv: \"#\" + m.id,\n                    moveNameResult: m.name.charAt(0).toUpperCase() + m.name.slice(1),\n                    moveEffectResult: m.effect_entries[m.effect_entries.length -1].short_effect,\n                    movePowerResult: m.power,\n                    moveAccuracyResult: m.accuracy,\n                    moveEffectChanceResult: m.effect_chance,\n                    currentView: 2\n                });\n            })\n    }\n \n/*\n//\n//      Main\n//\n*/\n\n    render() { \n        return (\n            <React.Fragment>\n                {/*Headers*/}\n                <h1 style={this.state.colorStyle}>Pokedex</h1>\n                <h2>{this.state.idResult} {this.state.nameResult}</h2>\n                <img src={this.state.picResult}></img>\n                <br></br>\n                {/* Set API Url From Input */}\n                <input style={this.state.borderStyle} defaultValue=\"Pokemon or ID...\" onClick={ e =>\n                    e.target.value = ''\n                } onChange={ e => {\n                    this.setState({\n                        searchParam: (e.target.value).toLowerCase(),\n                        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/\" + (e.target.value).toLowerCase() + \"/\"\n                    })}\n                }></input>\n                {/* SearchButton */}\n                <button style={this.state.borderStyle} onClick={ () => \n                    this.pokeSearch()\n                }>Search</button>\n                <br></br>\n                <br></br>\n\n        {(this.state.currentView === 1) &&\n        <div id=\"PokeINFO\">        \n                <div className=\"tableDiv\">\n\n                <table>\n                    <tr>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"abilityTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Abilities:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.abilityResult).map((abil) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>{this.firstUpper(this.state.abilityResult[abil].ability.name)}</td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"typeTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Types:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.typeResult).map((typing) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>{this.firstUpper(this.state.typeResult[typing].type.name)}</td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    </tr>\n                </table>\n\n                </div>\n                <h2>Moves:</h2>\n\n                <table id=\"moveTable\">\n                    <tr>\n                        <td style={this.state.borderStyle}> Move Name </td>\n                        <td style={this.state.borderStyle}> Learned At </td>\n                        <td style={this.state.borderStyle}> Learned By </td>\n                    </tr>\n                    {Object.keys(this.state.moveResult).map((move) => {\n                        return(\n                            <tr>\n                                <td style={this.state.borderStyle}>\n                                <a style={this.state.colorStyle} onClick={ mv => {\n                                    this.moveSearch(\"https://pokeapi.co/api/v2/move/\"+this.state.moveResult[move].move.name+\"/\");\n                                }}>{this.firstUpper(this.state.moveResult[move].move.name)}</a>\n                                </td>\n                                <td style={this.state.borderStyle}>{this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].level_learned_at}</td>\n                                <td style={this.state.borderStyle}>{this.firstUpper(this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].move_learn_method.name)}</td>\n                            </tr>\n                        );\n                    })}\n                </table>\n        </div>\n        }\n\n        {(this.state.currentView === 2) &&\n            <div>\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.moveNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.idMv}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect</td>\n                        <td style={this.state.borderStyle}>{this.state.moveEffectResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Power</td>\n                        <td style={this.state.borderStyle}>{this.state.movePowerResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Accuracy</td>\n                        <td style={this.state.borderStyle}>{this.state.moveAccuracyResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect Chance</td>\n                        <td style={this.state.borderStyle}>{this.state.moveEffectChanceResult}</td>\n                    </tr>\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n            </React.Fragment>\n        );\n    }\n}\n \nexport default PokeTable;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PokeTable from './Components/PokeTable';\n\nReactDOM.render(\n    <PokeTable />, \n    document.getElementById('root')\n);"],"sourceRoot":""}