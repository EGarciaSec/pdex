{"version":3,"sources":["Components/PokeTable.jsx","index.js"],"names":["PokeTable","state","currentView","idResult","nameResult","typeResult","abilityResult","moveResult","picResult","prevPic","prevID","prevName","searchType","searchParam","urlForPokeSearch","urlForMoveSearch","colorStyle","color","borderStyle","borderColor","moveNameResult","idMv","moveEffectResult","movePowerResult","moveAccuracyResult","moveEffectChanceResult","moveTypeResult","abilityIdResult","abilityNameResult","abilityEffectResult","typeIdResult","typeNameResult","doubleDamageFrom","doubleDamageTo","halfDamageFrom","halfDamageTo","noDamageFrom","noDamageTo","this","setState","typeColor","length","type","name","stringD","charAt","toUpperCase","slice","_this2","fetch","then","d","json","id","moves","sprites","front_default","abilities","types","moveParam","_this3","m","effect_entries","short_effect","power","accuracy","effect_chance","toLowerCase","abilParam","_this4","b","typeParam","_this5","t","damage_relations","double_damage_from","double_damage_to","half_damage_from","half_damage_to","no_damage_from","no_damage_to","_this6","react_default","a","createElement","Fragment","style","src","defaultValue","onClick","e","target","value","onChange","pokeSearch","className","Object","keys","map","abil","ab","abilitySearch","ability","firstUpper","typing","typeSearch","move","mv","moveSearch","version_group_details","level_learned_at","move_learn_method","colSpan","r","resetView","rowSpan","typ","Component","ReactDOM","render","Components_PokeTable","document","getElementById"],"mappings":"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","file":"static/js/main.dff66b1d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass PokeTable extends Component {\n    state = { \n        currentView: \"PokeInfo\",\n        //Results obtained from JSON Fethc\n        idResult: null,\n        nameResult: null,\n        typeResult: [],\n        abilityResult: [],\n        moveResult: [],\n        picResult: null ,\n        prevPic: null,\n        prevID: null,\n        prevName: null,\n        //Parameters for the Search\n        searchType: \"pokemon\",\n        searchParam: \"0\",\n        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/1/\",\n        urlForMoveSearch: \"https://pokeapi.co/api/v2/move/1/\",\n        //CSS Stylings\n        colorStyle: {\n            color: 'red'\n        },\n        borderStyle: {\n            borderColor: 'white'\n        },\n        //Move States\n        moveNameResult: null,\n        idMv: null,\n        moveEffectResult: null,\n        movePowerResult: 0,\n        moveAccuracyResult: 0,\n        moveEffectChanceResult: 0,\n        moveTypeResult: null,\n        //Ability States\n        abilityIdResult: 0,\n        abilityNameResult: null,\n        abilityEffectResult: null,\n        //Type States\n        typeIdResult: 0,\n        typeNameResult: null,\n        doubleDamageFrom: [],\n        doubleDamageTo: [],\n        halfDamageFrom: [],\n        halfDamageTo: [],\n        noDamageFrom: [],\n        noDamageTo: []\n    }\n\n/*\n//\n//      Functions\n//\n*/\n\n    resetView() {\n        this.setState({\n            currentView: \"PokeInfo\",\n            picResult: this.state.prevPic,\n            idResult: this.state.prevID,\n            nameResult: this.state.prevName\n        })\n        var typeColor = null;\n        //Check for Primary Type\n        if(this.state.typeResult.length === 1) {\n            typeColor = this.state.typeResult[0].type.name;\n        } else {\n            if (this.state.typeResult[1].type.name === 'fire') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'grass') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'electric') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'water') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else if (this.state.typeResult[1].type.name === 'ice') {\n                typeColor = this.state.typeResult[1].type.name;\n            } else {\n                typeColor = this.state.typeResult[0].type.name;\n            }\n        }\n        //Color Sets\n        if (typeColor === 'fire' || typeColor === 'dragon') {\n            this.setState({\n                borderStyle: {borderColor: 'red'},\n                colorStyle: {color: 'red'}\n            })\n        } else if(typeColor === 'water' || typeColor === 'ice') {\n            this.setState({\n                borderStyle: {borderColor: 'blue'},\n                colorStyle: {color: 'blue'}\n            })\n        } else if(typeColor === 'electric') {\n            this.setState({\n                borderStyle: {borderColor: 'yellow'},\n                colorStyle: {color: 'yellow'}\n            })\n        } else if(typeColor === 'grass') {\n            this.setState({\n                borderStyle: {borderColor: 'green'},\n                colorStyle: {color: 'green'}\n            })\n        } else if(typeColor === 'poison') {\n            this.setState({\n                borderStyle: {borderColor: 'purple'},\n                colorStyle: {color: 'purple'}\n            })\n        } else if(typeColor === 'ground' || typeColor === 'rock') {\n            this.setState({\n                borderStyle: {borderColor: 'brown'},\n                colorStyle: {color: 'brown'}\n            })\n        }else {\n            this.setState({\n                borderStyle: {borderColor: 'white'},\n                colorStyle: {color: 'gray'}\n            })\n        }\n    }\n\n    //Function to UpperCase first Letter\n    firstUpper(stringD) {\n        return(\n            stringD.charAt(0).toUpperCase() + stringD.slice(1)\n        );\n    }\n\n    //Fetch Function\n    pokeSearch() {\n        fetch(this.state.urlForPokeSearch)\n            //Return as JSON\n            .then(d => d.json())\n            .then(d => {\n                this.setState({\n                    idResult: \"#\" + d.id,\n                    nameResult: d.name.charAt(0).toUpperCase() + d.name.slice(1),\n                    moveResult: d.moves,\n                    picResult: d.sprites.front_default,\n                    abilityResult: d.abilities,\n                    typeResult: d.types\n                })\n            })\n            //Set Style Colors depending on Result Type\n            .then(d => {\n                var typeColor = null;\n                //Check for Primary Type\n                if(this.state.typeResult.length === 1) {\n                    typeColor = this.state.typeResult[0].type.name;\n                } else {\n                    if (this.state.typeResult[1].type.name === 'fire') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'grass') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'electric') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'water') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'ice') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else {\n                        typeColor = this.state.typeResult[0].type.name;\n                    }\n                }\n                //Color Sets\n                if (typeColor === 'fire' || typeColor === 'dragon') {\n                    this.setState({\n                        borderStyle: {borderColor: 'red'},\n                        colorStyle: {color: 'red'}\n                    })\n                } else if(typeColor === 'water' || typeColor === 'ice') {\n                    this.setState({\n                        borderStyle: {borderColor: 'blue'},\n                        colorStyle: {color: 'blue'}\n                    })\n                } else if(typeColor === 'electric') {\n                    this.setState({\n                        borderStyle: {borderColor: 'yellow'},\n                        colorStyle: {color: 'yellow'}\n                    })\n                } else if(typeColor === 'grass') {\n                    this.setState({\n                        borderStyle: {borderColor: 'green'},\n                        colorStyle: {color: 'green'}\n                    })\n                } else if(typeColor === 'poison') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'ground' || typeColor === 'rock') {\n                    this.setState({\n                        borderStyle: {borderColor: 'brown'},\n                        colorStyle: {color: 'brown'}\n                    })\n                }else {\n                    this.setState({\n                        borderStyle: {borderColor: 'white'},\n                        colorStyle: {color: 'gray'}\n                    })\n                }\n            })\n    }\n\n    //Query API based on Move\n    moveSearch(moveParam) {\n        fetch(moveParam)\n            //Return as JSON\n            .then(m => m.json())\n            .then(m => {\n                this.setState({\n                    idMv: \"#\" + m.id,\n                    moveNameResult: m.name.charAt(0).toUpperCase() + m.name.slice(1),\n                    moveEffectResult: m.effect_entries[m.effect_entries.length -1].short_effect,\n                    movePowerResult: m.power,\n                    moveAccuracyResult: m.accuracy,\n                    moveEffectChanceResult: m.effect_chance,\n                    moveTypeResult: m.type.name.charAt(0).toUpperCase() + m.type.name.slice(1),\n                    currentView: \"MoveInfo\"\n                });\n            })\n            .then(m => {\n                var typeColor = null;\n                //Check for Primary Type\n                typeColor = this.state.moveTypeResult.toLowerCase();\n                //Color Sets\n                if (typeColor === 'fire' || typeColor === 'dragon') {\n                    this.setState({\n                        borderStyle: {borderColor: 'red'},\n                        colorStyle: {color: 'red'}\n                    })\n                } else if(typeColor === 'water' || typeColor === 'ice') {\n                    this.setState({\n                        borderStyle: {borderColor: 'blue'},\n                        colorStyle: {color: 'blue'}\n                    })\n                } else if(typeColor === 'electric') {\n                    this.setState({\n                        borderStyle: {borderColor: 'yellow'},\n                        colorStyle: {color: 'yellow'}\n                    })\n                } else if(typeColor === 'grass') {\n                    this.setState({\n                        borderStyle: {borderColor: 'green'},\n                        colorStyle: {color: 'green'}\n                    })\n                } else if(typeColor === 'poison') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'},\n                        colorStyle: {color: 'purple'}\n                    })\n                } else if(typeColor === 'ground' || typeColor === 'rock') {\n                    this.setState({\n                        borderStyle: {borderColor: 'brown'},\n                        colorStyle: {color: 'brown'}\n                    })\n                }else {\n                    this.setState({\n                        borderStyle: {borderColor: 'white'},\n                        colorStyle: {color: 'gray'}\n                    })\n                }\n            })\n    }\n\n    //Query API based on Ability\n    abilitySearch(abilParam){\n        fetch(abilParam)\n            //Return as JSON\n            .then(b => b.json())\n            .then(b => {\n                this.setState({\n                    abilityIdResult: \"#\" + b.id,\n                    abilityNameResult: b.name.charAt(0).toUpperCase() + b.name.slice(1),\n                    abilityEffectResult: b.effect_entries[b.effect_entries.length -1].short_effect,\n                    currentView: \"AbilityInfo\"\n                });\n            })        \n    }\n\n    //Query API based on Type\n    typeSearch(typeParam) {\n        fetch(typeParam)\n        //Return JSON\n        .then( t => t.json())\n        .then( t => {\n            if (this.state.picResult != null) {\n                this.setState({\n                    typeIdResult: \"#\" + t.id,\n                    typeNameResult: t.name.charAt(0).toUpperCase() + t.name.slice(1),\n                    doubleDamageFrom: t.damage_relations.double_damage_from,\n                    doubleDamageTo: t.damage_relations.double_damage_to,\n                    halfDamageFrom: t.damage_relations.half_damage_from,\n                    halfDamageTo: t.damage_relations.half_damage_to,\n                    noDamageFrom: t.damage_relations.no_damage_from,\n                    noDamageTo: t.damage_relations.no_damage_to,\n                    prevPic: this.state.picResult,\n                    picResult: null,\n                    prevID: this.state.idResult,\n                    prevName: this.state.nameResult,\n                    nameResult: null,\n                    idResult: null,\n                    currentView: \"TypeInfo\"\n                });\n            } else {\n                this.setState({\n                    typeIdResult: \"#\" + t.id,\n                    typeNameResult: t.name.charAt(0).toUpperCase() + t.name.slice(1),\n                    doubleDamageFrom: t.damage_relations.double_damage_from,\n                    doubleDamageTo: t.damage_relations.double_damage_to,\n                    halfDamageFrom: t.damage_relations.half_damage_from,\n                    halfDamageTo: t.damage_relations.half_damage_to,\n                    noDamageFrom: t.damage_relations.no_damage_from,\n                    noDamageTo: t.damage_relations.no_damage_to,\n                    currentView: \"TypeInfo\"\n                });\n            }\n        })\n        .then(t => {\n            var typeColor = null;\n            //Check for Primary Type\n            typeColor = this.state.typeNameResult.toLowerCase();\n            //Color Sets\n            if (typeColor === 'fire' || typeColor === 'dragon') {\n                this.setState({\n                    borderStyle: {borderColor: 'red'},\n                    colorStyle: {color: 'red'}\n                })\n            } else if(typeColor === 'water' || typeColor === 'ice') {\n                this.setState({\n                    borderStyle: {borderColor: 'blue'},\n                    colorStyle: {color: 'blue'}\n                })\n            } else if(typeColor === 'electric') {\n                this.setState({\n                    borderStyle: {borderColor: 'yellow'},\n                    colorStyle: {color: 'yellow'}\n                })\n            } else if(typeColor === 'grass') {\n                this.setState({\n                    borderStyle: {borderColor: 'green'},\n                    colorStyle: {color: 'green'}\n                })\n            } else if(typeColor === 'poison') {\n                this.setState({\n                    borderStyle: {borderColor: 'purple'},\n                    colorStyle: {color: 'purple'}\n                })\n            } else if(typeColor === 'ground' || typeColor === 'rock') {\n                this.setState({\n                    borderStyle: {borderColor: 'brown'},\n                    colorStyle: {color: 'brown'}\n                })\n            }else {\n                this.setState({\n                    borderStyle: {borderColor: 'white'},\n                    colorStyle: {color: 'gray'}\n                })\n            }\n        })\n    }\n \n/*\n//\n//      Main\n//\n*/\n\n    render() { \n        return (\n            <React.Fragment>\n                {/*Headers*/}\n                <h1 style={this.state.colorStyle}>Pokedex</h1>\n                <h2>{this.state.idResult} {this.state.nameResult}</h2>\n                <img src={this.state.picResult}></img>\n                <br></br>\n\n        {(this.state.currentView === \"PokeInfo\") &&\n        <div id=\"PokeINFO\">\n        {/* Set API Url From Input */}\n                <input style={this.state.borderStyle} defaultValue=\"Pokemon or ID...\" onClick={ e =>\n                    e.target.value = ''\n                } onChange={ e => {\n                    this.setState({\n                        searchParam: (e.target.value).toLowerCase(),\n                        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/\" + (e.target.value).toLowerCase() + \"/\"\n                    })}\n                }></input>\n                {/* SearchButton */}\n                <button style={this.state.borderStyle} onClick={ () => \n                    this.pokeSearch()\n                }>Search</button>\n                <br></br>\n                <br></br>\n                <div className=\"tableDiv\">\n\n                <table>\n                    <tr>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"abilityTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Abilities:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.abilityResult).map((abil) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>\n                                        <a style={this.state.colorStyle} onClick={ ab => {\n                                            this.abilitySearch(\"https://pokeapi.co/api/v2/ability/\"+this.state.abilityResult[abil].ability.name+\"/\");\n                                        }}>{this.firstUpper(this.state.abilityResult[abil].ability.name)}</a>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"typeTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Types:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.typeResult).map((typing) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>\n                                        <a style={this.state.colorStyle} onClick={ t => {\n                                            this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.typeResult[typing].type.name + \"/\");\n                                        }}>{this.firstUpper(this.state.typeResult[typing].type.name)}</a>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    </tr>\n                </table>\n\n                </div>\n                <h2>Moves:</h2>\n\n                <table id=\"moveTable\">\n                    <tr>\n                        <td style={this.state.borderStyle}> Move Name </td>\n                        <td style={this.state.borderStyle}> Learned At </td>\n                        <td style={this.state.borderStyle}> Learned By </td>\n                    </tr>\n                    {Object.keys(this.state.moveResult).map((move) => {\n                        return(\n                            <tr>\n                                <td style={this.state.borderStyle}>\n                                <a style={this.state.colorStyle} onClick={ mv => {\n                                    this.moveSearch(\"https://pokeapi.co/api/v2/move/\"+this.state.moveResult[move].move.name+\"/\");\n                                }}>{this.firstUpper(this.state.moveResult[move].move.name)}</a>\n                                </td>\n                                <td style={this.state.borderStyle}>{this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].level_learned_at}</td>\n                                <td style={this.state.borderStyle}>{this.firstUpper(this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].move_learn_method.name)}</td>\n                            </tr>\n                        );\n                    })}\n                </table>\n        </div>\n        }\n\n        {(this.state.currentView === \"MoveInfo\") &&\n            <div id=\"MoveInfo\">\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.moveNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.idMv}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Type</td>\n                        <td style={this.state.borderStyle}>{this.state.moveTypeResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect</td>\n                        <td style={this.state.borderStyle}>{this.state.moveEffectResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Power</td>\n                        <td style={this.state.borderStyle}>{this.state.movePowerResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Accuracy</td>\n                        <td style={this.state.borderStyle}>{this.state.moveAccuracyResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect Chance</td>\n                        <td style={this.state.borderStyle}>{this.state.moveEffectChanceResult}</td>\n                    </tr>\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n\n        {(this.state.currentView === \"AbilityInfo\") && \n            <div id=\"AbilityInfo\">\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.abilityNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.abilityIdResult}</td>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>Effect</td>\n                        <td style={this.state.borderStyle}>{this.state.abilityEffectResult}</td>\n                    </tr>\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n\n        {(this.state.currentView === \"TypeInfo\") && \n            <div id=\"TypeInfo\">\n                <table>\n                    <tr>\n                        <th style={this.state.borderStyle} colSpan=\"2\">{this.state.typeNameResult}</th>\n                    </tr>\n                    <tr>\n                        <td style={this.state.borderStyle}>ID</td>\n                        <td style={this.state.borderStyle}>{this.state.typeIdResult}</td>\n                    </tr>\n                    <tr>\n                        <th rowSpan={this.state.doubleDamageFrom.length + 1} style={this.state.borderStyle}>Double Damage From</th>\n                    </tr>\n                        {Object.keys(this.state.doubleDamageFrom).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.doubleDamageFrom[typ].name + \"/\");\n                                }}>{this.state.doubleDamageFrom[typ].name}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.doubleDamageTo.length + 1} style={this.state.borderStyle}>Double Damage To</th>\n                    </tr>\n                        {Object.keys(this.state.doubleDamageTo).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.doubleDamageTo[typ].name + \"/\");\n                                }}>{this.state.doubleDamageTo[typ].name}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.halfDamageFrom.length + 1} style={this.state.borderStyle}>Half Damage From</th>\n                    </tr>\n                        {Object.keys(this.state.halfDamageFrom).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.halfDamageFrom[typ].name + \"/\");\n                                }}>{this.state.halfDamageFrom[typ].name}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.halfDamageTo.length + 1} style={this.state.borderStyle}>Half Damage To</th>\n                    </tr>\n                        {Object.keys(this.state.halfDamageTo).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.halfDamageTo[typ].name + \"/\");\n                                }}>{this.state.halfDamageTo[typ].name}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.noDamageFrom.length + 1} style={this.state.borderStyle}>No Damage From</th>\n                    </tr>\n                        {Object.keys(this.state.noDamageFrom).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.noDamageFrom[typ].name + \"/\");\n                                }}>{this.state.noDamageFrom[typ].name}</a>\n                                </td></tr>\n                            );\n                        })}\n                    <tr>\n                        <th rowSpan={this.state.noDamageTo.length + 1} style={this.state.borderStyle}>No Damage To</th>\n                    </tr>\n                        {Object.keys(this.state.noDamageTo).map((typ) => {\n                            return(\n                                <tr><td style={this.state.borderStyle}>\n                                <a onClick={ t => {\n                                    this.typeSearch(\"https://pokeapi.co/api/v2/type/\" + this.state.noDamageTo[typ].name + \"/\");\n                                }}>{this.state.noDamageTo[typ].name}</a>\n                                </td></tr>\n                            );\n                        })}\n                </table>\n                <br></br>\n                <button style={this.state.borderStyle} onClick={ r => {\n                    this.resetView()\n                }}>Reset</button>\n            </div>\n        }\n            </React.Fragment>\n        );\n    }\n}\n \nexport default PokeTable;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PokeTable from './Components/PokeTable';\n\nReactDOM.render(\n    <PokeTable />, \n    document.getElementById('root')\n);"],"sourceRoot":""}