{"version":3,"sources":["Components/PokeTable.jsx","index.js"],"names":["PokeTable","state","idResult","nameResult","typeResult","abilityResult","moveResult","picResult","searchType","searchParam","urlForPokeSearch","colorStyle","color","borderStyle","borderColor","stringD","charAt","toUpperCase","slice","_this2","this","fetch","then","d","json","setState","id","name","moves","sprites","front_default","abilities","types","typeColor","length","type","_this3","react_default","a","createElement","Fragment","style","src","defaultValue","onClick","e","target","value","onChange","toLowerCase","pokeSearch","className","Object","keys","map","abil","firstUpper","ability","typing","move","version_group_details","level_learned_at","move_learn_method","Component","ReactDOM","render","Components_PokeTable","document","getElementById"],"mappings":"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","file":"static/js/main.25c1418a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass PokeTable extends Component {\n    state = { \n        //Results obtained from JSON Fethc\n        idResult: null,\n        nameResult: null,\n        typeResult: [],\n        abilityResult: [],\n        moveResult: [],\n        picResult: null ,\n        //Parameters for the Search\n        searchType: \"pokemon\",\n        searchParam: \"0\",\n        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/1/\",\n        //CSS Stylings\n        colorStyle: {\n            color: 'red'\n        },\n        borderStyle: {\n            borderColor: 'white'\n        }\n    }\n\n/*\n//\n//      Functions\n//\n*/\n\n    //Function to UpperCase first Letter\n    firstUpper(stringD) {\n        return(\n            stringD.charAt(0).toUpperCase() + stringD.slice(1)\n        );\n    }\n\n    //Fetch Function\n    pokeSearch() {\n        fetch(this.state.urlForPokeSearch)\n            //Return as JSON\n            .then(d => d.json())\n            .then(d => {\n                this.setState({\n                    idResult: \"#\" + d.id,\n                    nameResult: d.name.charAt(0).toUpperCase() + d.name.slice(1),\n                    moveResult: d.moves,\n                    picResult: d.sprites.front_default,\n                    abilityResult: d.abilities,\n                    typeResult: d.types\n                })\n            })\n            //Set Style Colors depending on Result Type\n            .then(d => {\n                var typeColor = null;\n                //Check for Primary Type\n                if(this.state.typeResult.length === 1) {\n                    typeColor = this.state.typeResult[0].type.name;\n                } else {\n                    if (this.state.typeResult[1].type.name === 'fire') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'grass') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'electric') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'water') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else if (this.state.typeResult[1].type.name === 'ice') {\n                        typeColor = this.state.typeResult[1].type.name;\n                    } else {\n                        typeColor = this.state.typeResult[0].type.name;\n                    }\n                }\n                //Color Sets\n                if (typeColor === 'fire' || typeColor === 'dragon') {\n                    this.setState({\n                        borderStyle: {borderColor: 'red'}\n                    })\n                } else if(typeColor === 'water' || typeColor === 'ice') {\n                    this.setState({\n                        borderStyle: {borderColor: 'blue'}\n                    })\n                } else if(typeColor === 'electric') {\n                    this.setState({\n                        borderStyle: {borderColor: 'yellow'}\n                    })\n                } else if(typeColor === 'grass') {\n                    this.setState({\n                        borderStyle: {borderColor: 'green'}\n                    })\n                } else if(typeColor === 'poison') {\n                    this.setState({\n                        borderStyle: {borderColor: 'purple'}\n                    })\n                } else if(typeColor === 'ground' || typeColor === 'rock') {\n                    this.setState({\n                        borderStyle: {borderColor: 'brown'}\n                    })\n                }else {\n                    this.setState({\n                        borderStyle: {borderColor: 'white'}\n                    })\n                }\n            })\n    }\n\n/*\n//\n//      Main\n//\n*/\n\n    render() { \n        return (\n            <React.Fragment>\n                {/*Headers*/}\n                <h1 style={this.state.colorStyle}>Pokedex</h1>\n                <h2>{this.state.idResult} {this.state.nameResult}</h2>\n                <img src={this.state.picResult}></img>\n                <br></br>\n                {/* Set API Url From Input */}\n                <input style={this.state.borderStyle} defaultValue=\"Pokemon or ID...\" onClick={ e =>\n                    e.target.value = ''\n                } onChange={ e => {\n                    this.setState({\n                        searchParam: (e.target.value).toLowerCase(),\n                        urlForPokeSearch: \"https://pokeapi.co/api/v2/pokemon/\" + (e.target.value).toLowerCase() + \"/\"\n                    })}\n                }></input>\n                {/* SearchButton */}\n                <button style={this.state.borderStyle} onClick={ () => \n                    this.pokeSearch()\n                }>Search</button>\n                <br></br>\n                <br></br>\n                <div className=\"tableDiv\">\n\n                <table>\n                    <tr>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"abilityTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Abilities:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.abilityResult).map((abil) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>{this.firstUpper(this.state.abilityResult[abil].ability.name)}</td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    <td style={this.state.borderStyle}>\n                    <table id=\"typeTable\">\n                        <tr>\n                            <td style={this.state.borderStyle}>\n                                <h3>Types:</h3>\n                            </td>\n                        </tr>\n                        {Object.keys(this.state.typeResult).map((typing) => {\n                            return(\n                                <tr>\n                                    <td style={this.state.borderStyle}>{this.firstUpper(this.state.typeResult[typing].type.name)}</td>\n                                </tr>\n                            );\n                        })}\n                    </table>\n                    </td>\n                    </tr>\n                </table>\n\n                </div>\n                <h1>Moves:</h1>\n\n                <table id=\"moveTable\">\n                    <tr>\n                        <td style={this.state.borderStyle}> Move Name </td>\n                        <td style={this.state.borderStyle}> Learned At </td>\n                        <td style={this.state.borderStyle}> Learned By </td>\n                    </tr>\n                    {Object.keys(this.state.moveResult).map((move) => {\n                        return(\n                            <tr>\n                                <td style={this.state.borderStyle}>{this.firstUpper(this.state.moveResult[move].move.name)}</td>\n                                <td style={this.state.borderStyle}>{this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].level_learned_at}</td>\n                                <td style={this.state.borderStyle}>{this.firstUpper(this.state.moveResult[move].version_group_details[this.state.moveResult[move].version_group_details.length -1].move_learn_method.name)}</td>\n                            </tr>\n                        );\n                    })}\n                </table>\n\n            </React.Fragment>\n        );\n    }\n}\n \nexport default PokeTable;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PokeTable from './Components/PokeTable';\n\nReactDOM.render(\n    <PokeTable />, \n    document.getElementById('root')\n);"],"sourceRoot":""}